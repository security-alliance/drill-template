# This Dockerfile builds all the dependencies needed by the monorepo, and should
# be used to build any of the follow-on services
#

# Stage 0 (named `manifests`) collects
# dependency manifest files (`package.json` and `pnpm-lock.yaml`) which are then
# used by stage 1 to install these dependencies
# development. The only reason we need a separate stage just for collecting the
# dependency manifests is that Docker's `COPY` command still does not allow
# copying based on a glob pattern (see this GitHub issue for more details
# https://github.com/moby/moby/issues/15858). Being able to copy only manifests
# into stage 1 (the `COPY --from=manifests` statement) is important to maximize
# Docker build cache hit rate. `alpine` is chosen as the base image for the
# first stage because it's the smallest image that have access to the `cp
# --parents -t` command (by installing the `coreutils` package).
# FROM alpine:3.16 as manifests
# RUN apk add coreutils

# WORKDIR /tmp
# COPY pnpm-lock.yaml package.json ./
# COPY ./ ./
# COPY packages src/packages/

# FROM us-docker.pkg.dev/oplabs-tools-artifacts/images/ci-builder:latest as foundry
# bullseye-slim is debian based
# we use it rather than alpine because it's not much
# bigger and alpine is often missing packages for node applications
# alpine is not officially supported by node.js
FROM node:20.8.1-bullseye-slim as base

# Base: install deps
RUN apt-get update && apt-get install -y \
  curl \
  jq \
  python3 \
  ca-certificates \
  git \
  g++ \
  make \
  gcc \
  musl-dev \
  bash \
  # the following 4 deps are needed for node-hid
  # which is a deep sub dependency of ethers to install
  # correctly
  pkg-config \
  libusb-1.0-0-dev \
  libudev-dev \
  --no-install-recommends

RUN npm install pnpm --global


ARG CACHEBUST=3
WORKDIR /opt/seal/services


# Copy services folder
COPY ./services ./


WORKDIR /opt/seal/services

RUN CI=1 pnpm install --verbose --no-frozen-lockfile


# CMD ["tail", "-f", "/dev/null"]

ENTRYPOINT ["pnpm", "run"]


FROM base as mon
WORKDIR /opt/seal/services
CMD ["start:mon"]
# CMD ["tail", "-f", "/dev/null"]


FROM base as bot
WORKDIR /opt/seal/services
CMD ["start:bot"]


